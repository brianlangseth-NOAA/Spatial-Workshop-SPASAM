length_data <- length(om_rep[(loc+1):loc_end]) #length of old data
length_entry <- length(new_entry) #length of new data
#If the lines being added are same as lines already there, replace old lines with new lines new data
if(length_data==length_entry) {
return(TRUE)
}else{
#If there are more lines being added than the lines already there, append new lines to make up the difference and then replace
length_element <- (entries[which(entries %in% loc)+1]-1)-loc
add <- length_entry - length_element
return(add)
}
}
table(dat$catch$seas)#check to ensure seas is the same DECISION - assumed seas 1 is start of year
loc <- grep("#OBS_yield_fleet$", om_rep)
new_val <- tidyr::unite(
round(dat$catch[1:dat$Nfleet], 3), #DECISION - round to 3 decimals
sep = " ",
col = "new_val")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val$new_val
#Catch SE - OBS_yield_fleet_se_EM
loc <- grep("#OBS_yield_fleet_se_EM", om_rep)
new_val <- rep(paste(dat$se_log_catch, collapse = " "),dat$endyr)
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
lengths=seq(10,205,by=5)
Latage=c(22,
35.2865,
41.384,
45.7348,
49.904,
53.8991,
57.7273,
64.2198,
74.721,
85.5489,
96.3811,
105.259,
112.534,
118.496,
123.383,
127.387,
130.669,
133.359,
135.563,
137.369,
138.85,
140.063,
141.058,
141.872,
142.54,
143.088,
143.536,
144.168)
#Function to calculate probability in a given length interval
getprob=function(L1=NULL,L2=NULL,meanL=NULL,sd=NULL){
#prob=pnorm(L2,mean=meanL,sd=sd)-pnorm(L1,mean=meanL,sd=sd)
prob=plnorm(L2,meanlog=meanL,sdlog=sd)-plnorm(L1,meanlog=meanL,sdlog=sd)
return(prob)
}
#matrix to hold alk
alk=matrix(NA,nrow=length(Latage),ncol=(length(lengths)-1),dimnames = list(paste0("a",seq(1:length(Latage))),paste0("l",(lengths[1:(length(lengths)-1)]))))
for(a in 1:length(Latage)){ #loop over 28 ages and the length bins and calculate probility for each bin
for(l in 1:(length(lengths)-1)){
alk[a,l]=getprob(L1=lengths[l],L2=lengths[l+1],meanL=log(Latage[a]),sd=0.1)
}
}
alk=round(alk,digits=2)
noentry = which(colSums(alk)==0) #determine which lengths dont have any entries
alk[1,noentry[1]]=1 #set the first column to be 1 for the first age 1
alk[dat$Nages,noentry[-1]]=1 #set the last columns to be 1 for the last age
alk=t(t(alk)/colSums(alk)) #divided by column sums to produce P(A|L); i.e. column sums among ages = 1
#Convert length comps to age comps
#DECISION - assume OBS_catch_prop is blocked by year first for each fleet
agecomp <- as.matrix(dat$lencomp[7:ncol(dat$lencomp)]) %*% t(alk)
agecomp_yr <- cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy,agecomp)
head(agecomp_yr)
head(agecomp)
rowSums(agecomp)
agecomp_prop <- agecomp/rowSums(agecomp)
head(agecomp_prop)
rowSums(agecomp_prop)
agecomp <- as.matrix(dat$lencomp[7:ncol(dat$lencomp)]) %*% t(alk)
agecomp_prop <- agecomp/rowSums(agecomp)
agecomp_yr <- cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp_prop)
agecomp_yr
loc <- grep("#OBS_catch_prop$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr*dat$Nfleet, ncol = dat$Nages) #Set up for all years and fleets
tmp_val[(dat$endyr * (agecomp_yr[,"FltSvy"] - 1) + agecomp_yr[,"Yr"]),] <- agecomp_yr[,-c(1,2)] #Assign for just the years and fleets in YFT data
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
head(tmp_val)
head(tmp_val,10)
new_val
rowSums(tmp_val)
head(tmp_val)
table(rowSums(tmp_val))
dim(alk)
dim(dat$lencomp)
om_rep[(loc + 1):(loc + dat$endyr*dat$Nfleet)] <- new_val
loc <- grep("#OBS_catch_prop_N_EM", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr, ncol = dat$Nfleet) #Set up for all years and fleets
tmp_val[cbind(dat$lencomp$Yr, dat$lencomp$FltSvy)] <- dat$lencomp$Nsamp #Assign for just the years and fleets in YFT data
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
loc <- grep("#OBS_survey_fleet_bio$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr, ncol = dat$Nsurveys) #Set up for all years and surveys
tmp_val[cbind(as.numeric(levels(dat$CPUE$year)),dat$Nsurveys)] <- dat$CPUE$cpu #Assign for just the years and surveys in YFT data
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
#Survey index SE - #OBS_survey_fleet_bio_se_EM
loc <- grep("#OBS_survey_fleet_bio_se_EM", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr, ncol = dat$Nsurveys) #Set up for all years and surveys
tmp_val[cbind(as.numeric(levels(dat$CPUE$year)),dat$Nsurveys)] <- dat$CPUE$cv #Assign for just the years and surveys in YFT data
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
#Survey Comps - #OBS_survey_prop set to #OBS_catch_prop for fleet 3
#DECISION - copying from proportions in fleet 3 catch for only years that overlap with cpue years.
#Believe these to be the same as the fleet comps. Can set survey select to that of catch
loc <- grep("#OBS_survey_prop$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr*dat$Nsurveys, ncol = dat$Nages) #Set up for all years and surveys
#years of comp data for fleet 3 that overlap with years of CPUE data
yrs_comp <- agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"][agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"] %in% dat$CPUE$year]
tmp_val[yrs_comp,] <- agecomp_yr[agecomp_yr[,"FltSvy"] == 3 & agecomp_yr[,"Yr"]%in%yrs_comp, -c(1:2)]
tmp_val
rowSums(tmp_val)
loc <- grep("#OBS_survey_prop$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr*dat$Nsurveys, ncol = dat$Nages) #Set up for all years and surveys
#years of comp data for fleet 3 that overlap with years of CPUE data
yrs_comp <- agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"][agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"] %in% dat$CPUE$year]
tmp_val[yrs_comp,] <- agecomp_yr[agecomp_yr[,"FltSvy"] == 3 & agecomp_yr[,"Yr"]%in%yrs_comp, -c(1:2)]
rowSums(tmp_val)
head(agecomp_yr)
loc <- grep("#OBS_survey_prop$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr*dat$Nsurveys, ncol = dat$Nages) #Set up for all years and surveys
#years of comp data for fleet 3 that overlap with years of CPUE data
yrs_comp <- agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"][agecomp_yr[agecomp_yr[,"FltSvy"]==3,"Yr"] %in% dat$CPUE$year]
tmp_val[yrs_comp,] <- agecomp_yr[agecomp_yr[,"FltSvy"] == 3 & agecomp_yr[,"Yr"]%in%yrs_comp, -c(1:2)]
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
#Have tag switch on - #do_tag
loc <- grep("#do_tag", om_rep)
loc
om_rep[loc]
#Have tag switch on - #do_tag
loc <- grep("#do_tag$", om_rep)
loc
125/5
0.288*3
0.315*3
0.261*3
0.356*3
ln(1)
log(1)
library(nwfscSurvey)
library(PacFIN.Utilities)
library(ggplot2)
dir = "//nwcfile/FRAM/Assessments/CurrentAssessments/DataModerate_2021/Quillback_Rockfish"
pacfin_abbr = "QLBK"
hkl_name = "Quillback Rockfish"
recfin_name = "QUILLBACK ROCKFISH"
or_rec_name = "Quillback"
ca_mrfss_code = 8826010120
library(dplyr)
library(tidyr)
options(stringsAsFactors = FALSE)
dir = "//nwcfile/FRAM/Assessments/CurrentAssessments/DataModerate_2021/Quillback_Rockfish/data"
#################################################################################################################
#---------------------------------------------------------------------------------------------------------------#
# Load the commercial data
#---------------------------------------------------------------------------------------------------------------#
#################################################################################################################
# PacFIN Commercial - 1984-2020 Landings lbs
load(file.path(dir, "PacFIN Catch", "QLBK.CompFT.20.Aug.2020.RData"))
com = QLBK.CompFT.20.Aug.2020
head(com)
library(dplyr)
library(tidyr)
dir = "//nwcfile/FRAM/Assessments/CurrentAssessments/DataModerate_2021/Quillback_Rockfish/data"
#################################################################################################################
#---------------------------------------------------------------------------------------------------------------#
# Load the commercial data
#---------------------------------------------------------------------------------------------------------------#
#################################################################################################################
# PacFIN Commercial - 1984-2020 Landings lbs
load(file.path(dir, "PacFIN Catch", "QLBK.CompFT.20.Aug.2020.RData"))
com = QLBK.CompFT.20.Aug.2020
dir
? save
save(file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData"))
file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData")
save(list = "com", file = file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData"))
rm("com")
load(file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData"))
dim(com)
dim(QLBK.CompFT.20.Aug.2020)
com = QLBK.CompFT.20.Aug.2020
names(com)
head(com)
which(names(com)=="VESSEL_ID")
dim(com)
com = com[,-which(names(com)=="VESSEL_ID")]
dim(com)
save(list = "com", file = file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData"))
rm("com")
load(file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.20.Aug.2020_NOT_CONFIDENTIAL.RData"))
dim(com)
head(com)
load(file.path(dir, "PacFIN Catch", "QLBK.CompFT.21.Feb.2021.RData"))
com_2020 = data
com_2020 = com_2020[,-which(names(com_2020)=="VESSEL_ID")]
dim(data)
dim(com_2020)
head(data)
com_2020 = com_2020[,-which(names(com_2020)%in%c("VESSEL_ID","VESSEL_NUM","VESSEL_REGISTRATION_ID","FISHER_LICENSE_NUM","FISH_TICKET_ID")]
dim(com_2020)
dim(data)
com_2020 = com_2020[,!which(names(com_2020)%in%c("VESSEL_ID","VESSEL_NUM","VESSEL_REGISTRATION_ID","FISHER_LICENSE_NUM","FISH_TICKET_ID")]
com_2020 = com_2020[,!which(names(com_2020)%in%c("VESSEL_ID","VESSEL_NUM","VESSEL_REGISTRATION_ID","FISHER_LICENSE_NUM","FISH_TICKET_ID"))]
dim(com_2020)
com_2020 = data
com_2020 = com_2020[,-which(names(com_2020)%in%c("VESSEL_ID","VESSEL_NUM","VESSEL_REGISTRATION_ID","FISHER_LICENSE_NUM","FISH_TICKET_ID"))]
dim(com_2020)
dir
load(file.path(dir, "PacFIN Catch", "QLBK.CompFT.21.Feb.2021.RData"))
com_2020 = data
com_2020 = com_2020[,-which(names(com_2020)%in%c("VESSEL_ID","VESSEL_NUM","VESSEL_REGISTRATION_ID","FISHER_LICENSE_NUM","FISH_TICKET_ID", "DEALER_ID", "DEALER_NUM", "DEALER_NAME"))]
dim(data)
dim(com_2020)
save(list = "com_2020", file = file.path("C:\\Users\\Brian.Langseth\\Desktop\\data to move to archives\\_Potential CONF data\\PacFIN Catch_NOT CONFIDENTIAL","QLBK.CompFT.21.Feb.2021_NOT_CONFIDENTIAL.RData"))
library(tidyr)
####
#User directories
####
if(Sys.getenv("USERNAME") == "Brian.Langseth") {
#data_loc is where you have your YFT data stored (have to clone repo from github)
#master_loc is where the base level OM and EM reside
#mod_loc is where you want to set up your new EM run
#data_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Assessment-Modeling-Workshop\\data\\Datasets_current_UseThese"
data_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Assessment-Modeling-Workshop\\data\\Datasets_old_DoNotUse"
master_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Workshop-SPASAM\\Operating_Model"
mod_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Workshop-SPASAM"
}
#FOR OTHER USERS, CAN ENTER LOCATIONS HERE ONCE
######################################################
#Read in data from github
######################################################
#One area - can adjust for other datasets
load(file.path(data_loc,'YFT_SRD_1A_4_v2.Rdata'))
dat <- dat_1A_4
bdat <- biol_dat
dat$fleetinfo
dat$catch
tail(dat$catch)
colSum(tail(dat$catch))
colSums(tail(dat$catch))
rowSums(tail(dat$catch))
install.packages("TMB")
library(remotes)
remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
library(sdmTMB)
exp(8)
log(9562000)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
inla.upgrade() # for the stable version
library("INLA")
library(INLA)
Rversion()
RVersion()
R.version()
R.Version()
log(2980.96)
setwd("C:/Users/Brian.Langseth/Desktop/test/New tagging data/MaxPeriod18_RaveMore_wNdev")
mod_name = "YFT_1area"
system.time({
invisible(shell(paste0(mod_name,".exe"," -nox -nohess"), wait=T))
})
21664/3600
library(tidyr)
if(Sys.getenv("USERNAME") == "Brian.Langseth") {
#data_loc is where you have your YFT data stored (have to clone repo from github)
#master_loc is where the base level OM and EM reside
#mod_loc is where you want to set up your new EM run
#data_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Assessment-Modeling-Workshop\\data\\Datasets_current_UseThese"
data_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Assessment-Modeling-Workshop\\data\\Datasets_old_DoNotUse"
master_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Workshop-SPASAM\\Operating_Model"
mod_loc <- "C:\\Users\\Brian.Langseth\\Desktop\\Spatial-Workshop-SPASAM"
}
#FOR OTHER USERS, CAN ENTER LOCATIONS HERE ONCE
######################################################
#Read in data from github
######################################################
#One area - can adjust for other datasets
load(file.path(data_loc,'YFT_SRD_1A_4_v2.Rdata'))
dat <- dat_1A_4
bdat <- biol_dat
######################################################
#Set up OM.rep file
######################################################
####
#Set up folder for new model run
####
mod_name <- "YFT_1area"
if(!dir.exists(file.path(mod_loc, mod_name))){
dir.create(file.path(mod_loc, mod_name))
dir.create(file.path(mod_loc, mod_name, "Estimation_Model"))
dir.create(file.path(mod_loc, mod_name, "Operating_Model"))
print("Directories created")
}
####
#Run the OM to get the .rep file - Only need to do this once (if haven't, uncomment the commented out lines)
####
setwd(file.path(mod_loc, mod_name, "Operating_Model"))
# file.copy(from = file.path(master_loc, "TIM_OM.exe"), to=getwd()) #Will return FALSE if files already exist
# file.copy(from = file.path(master_loc, "TIM_OM.tpl"), to=getwd()) #Will return FALSE if files already exist
# file.copy(from = file.path(mod_loc, "Panmictic", "Operating_Model", "TIM_OM_all.dat"), to = "TIM_OM.dat") #Will return FALSE if files already exist
# invisible(shell(paste0("TIM_OM.exe"," -nox -nohess"), wait=T))
# file.remove(list.files()[-grep(".rep|.tpl|.exe|.dat", list.files())]) #remove extra files
#Access the .rep file to then enter the YFT data
om_rep <- readLines("TIM_OM.rep",n=-1)
check_entry = function(loc, loc_end, new_entry){
entries <- grep("#", om_rep)
length_data <- length(om_rep[(loc+1):loc_end]) #length of old data
length_entry <- length(new_entry) #length of new data
#If the lines being added are same as lines already there, replace old lines with new lines new data
if(length_data==length_entry) {
return(TRUE)
}else{
#If there are more lines being added than the lines already there, append new lines to make up the difference and then replace
length_element <- (entries[which(entries %in% loc)+1]-1)-loc
add <- length_entry - length_element
return(add)
}
}
loc <- grep("#SSB_type", om_rep)
om_rep <- append(om_rep, c("#catch_num_switch",1), after = (loc+1))
####
#Catches
####
#Catch - OBS_yield_fleet
table(dat$catch$seas)#check to ensure seas is the same DECISION - assumed seas 1 is start of year
loc <- grep("#OBS_yield_fleet$", om_rep)
new_val <- tidyr::unite(
round(dat$catch[,1:7], 3), #DECISION - round to 3 decimals
sep = " ",
col = "new_val")
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val$new_val
#Catch SE - OBS_yield_fleet_se_EM
loc <- grep("#OBS_yield_fleet_se_EM", om_rep)
new_val <- rep(paste(dat$se_log_catch, collapse = " "),dat$endyr)
om_rep[(loc + 1):(loc + dat$endyr)] <- new_val
####
#Comps
####
#Length Comp - #OBS_catch_prop
#For TIM, the comp data is of age comps by year
#For YFT data, the comp data is of length comps by year
#So Create age-length key taken from Jon's ALK.R and modified
#DECISION - dat$lbin_vector final bin is 198, whereas dat$lencomp final bin is 200. There
#isn't any catches in this last bin so ignoring for now
#DECISION - set end of final lbin to be 205 cm (as opposed to ongoing) (doesnt really matter since no catches in that bin)
#DECISION - assume lognormal error for distribution of lengths around an age
#DECISION - round pdf probability to 2 sig digits (which truncates the possible ages with probability)
#DECISION - not using precise se (not using CV to SE conversion)
lengths=seq(10,205,by=5)
Latage=c(22,
35.2865,
41.384,
45.7348,
49.904,
53.8991,
57.7273,
64.2198,
74.721,
85.5489,
96.3811,
105.259,
112.534,
118.496,
123.383,
127.387,
130.669,
133.359,
135.563,
137.369,
138.85,
140.063,
141.058,
141.872,
142.54,
143.088,
143.536,
144.168)
#Function to calculate probability in a given length interval
getprob=function(L1=NULL,L2=NULL,meanL=NULL,sd=NULL){
#prob=pnorm(L2,mean=meanL,sd=sd)-pnorm(L1,mean=meanL,sd=sd)
prob=plnorm(L2,meanlog=meanL,sdlog=sd)-plnorm(L1,meanlog=meanL,sdlog=sd)
return(prob)
}
#matrix to hold alk
alk=matrix(NA,nrow=length(Latage),ncol=(length(lengths)-1),dimnames = list(paste0("a",seq(1:length(Latage))),paste0("l",(lengths[1:(length(lengths)-1)]))))
for(a in 1:length(Latage)){ #loop over 28 ages and the length bins and calculate probility for each bin
for(l in 1:(length(lengths)-1)){
alk[a,l]=getprob(L1=lengths[l],L2=lengths[l+1],meanL=log(Latage[a]),sd=0.1)
}
}
alk=round(alk,digits=2)
noentry = which(colSums(alk)==0) #determine which lengths dont have any entries
alk[1,noentry[1]]=1 #set the first column to be 1 for the first age 1
alk[dat$Nages,noentry[-1]]=1 #set the last columns to be 1 for the last age
alk=t(t(alk)/colSums(alk)) #divided by column sums to produce P(A|L); i.e. column sums among ages = 1
#Convert length comps to age comps
#DECISION - assume OBS_catch_prop is blocked by year first for each fleet
agecomp <- as.matrix(dat$lencomp[7:ncol(dat$lencomp)]) %*% t(alk)
agecomp_prop <- agecomp/rowSums(agecomp)
agecomp_yr <- cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp_prop)
#Put into om_rep file
loc <- grep("#OBS_catch_prop$", om_rep)
tmp_val <- matrix(0, nrow = dat$endyr*7, ncol = dat$Nages) #Set up for all years and fleets
tmp_val[(dat$endyr * (agecomp_yr[,"FltSvy"] - 1) + agecomp_yr[,"Yr"]),] <- agecomp_yr[,-c(1,2)] #Assign for just the years and fleets in YFT data
new_val <- apply(tmp_val, 1, FUN = paste, collapse = " ")
head(new_val)
length(new_val)
head(agecomp_yr)
dim(agecomp_prop)
View(agecomp_yr)
agecomp_yr
getwd()
write.csv(agecomp_yr,""C:/Users/Brian.Langseth/Desktop/test/Comps_fleet")
write.csv(agecomp_yr,"C:/Users/Brian.Langseth/Desktop/test/Comps_fleet")
write.csv(agecomp_yr,"C:/Users/Brian.Langseth/Desktop/test/Comps_fleet.csv")
dim(agecomp)
head(agecomp)
brian <- cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp)
write.csv(agecomp_yr,"C:/Users/Brian.Langseth/Desktop/test/Comps_fleet.csv")
temp <- cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp)
head(temp)
aggregate(temp, by = "FltSvy", FUN = sum)
aggregate(temp, by = list("FltSvy"), FUN = sum)
aggregate(temp, by = list(temp$FltSvy), FUN = sum)
colSum(temp)
colsum(temp)
colsums(temp)
colSums(temp)
group_by(temp, FltSvy) %>% summarise(colSum = colSums(temp))
library(dplyr)
group_by(temp, FltSvy) %>% summarise(colSum = colSums(temp))
aggregate(temp, by = list(temp$FltSvy), FUN = colsums)
aggregate(temp, by = list(temp$FltSvy), FUN = colSums)
str(temp)
aggregate(temp, by = list(temp[,'FltSvy']), FUN = colSums)
temp[,'FltSvy']
aggregate(temp, by = list('FltSvy'), FUN = colSums)
aggregate(temp, by = list(temp[,'FltSvy']), FUN = colSums)
aggregate(temp, by = list(FltSvy), FUN = colSums)
aggregate(temp, by = list("FltSvy"), FUN = colSums)
head(temp)
data.frame(temp)
aggregate(data.frame(temp), by = list("FltSvy"), FUN = colSums)
aggregate(data.frame(temp), by = list(temp[,'FltSvy']), FUN = colSums)
temp <- data.frame(cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp))
? aggregate
aggregate(temp, by = list(temp$FltSvy), FUN = colSums)
temp <- data.frame(cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp))
head(temp)
temp$FltSvy
head(temp[-c(1,2),])
head(temp[,])
head(temp[,-c(1,2)])
aggregate(temp[,-c(1,2)], by = list(temp$FltSvy), FUN = colSums)
colSums
colSums(temp)
temp$FltSvy
aggregate(temp[,-c(1,2)], by = list("Fleet" = temp$FltSvy), FUN = colSums)
dim(temp[,-c(1,2)])
? apply
? tapply
tapply(temp[,-c(1,2)], INDEX = temp$FltSvy, FUN = colSums)
tapply(temp, INDEX = temp$FltSvy, FUN = colSums)
tapply(temp, INDEX = list(temp$FltSvy), FUN = colSums)
str(temp)
tapply(temp[,-1], INDEX = list(temp$FltSvy), FUN = colSums)
? by
tapply(temp, INDEX = list(FltSvy), FUN = colSums)
tapply(temp, INDEX = list("FltSvy"), FUN = colSums)
tapply(temp, INDEX = list(temp[,"FltSvy"]), FUN = colSums)
temp[,"FltSvy"]
dim(temp)
tapply(temp, INDEX = list(temp[,"FltSvy"]), FUN = Sums)
tapply(temp, INDEX = list(temp[,"FltSvy"]), FUN = sum)
aggregate(temp, INDEX = list(temp[,"FltSvy"]), FUN = sum)
aggregate(temp, by = list(temp[,"FltSvy"]), FUN = sum)
write.csv(temp.agg, "C:\\Users\\Brian.Langseth\\Desktop\\test\\Comps_fleet.csv")
temp <- data.frame(cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp))
temp.agg <- aggregate(temp, by = list(temp[,"FltSvy"]), FUN = sum)
write.csv(temp.agg, "C:\\Users\\Brian.Langseth\\Desktop\\test\\Comps_fleet.csv")
temp.agg <- aggregate(temp[,-c(1,2)], by = list(temp[,"FltSvy"]), FUN = sum)
temp.agg
temp <- data.frame(cbind("Yr" = dat$lencomp$Yr, "FltSvy" = dat$lencomp$FltSvy, agecomp))
temp.agg <- aggregate(temp[,-c(1,2)], by = list(temp[,"FltSvy"]), FUN = sum)
write.csv(temp.agg, "C:\\Users\\Brian.Langseth\\Desktop\\test\\Comps_fleet.csv")
rm(list=ls())
setwd("C:/Users/Brian.Langseth/Desktop/test/New tagging data/New changes_RaveMore_fixSelFleet")
mod_name = "YFT_1area"
system.time({
invisible(shell(paste0(mod_name,".exe"," -nox -nohess"), wait=T))
})
setwd("C:/Users/Brian.Langseth/Desktop/test/New tagging data/MaxPeriod18_RaveMore_fixSelFleet")
mod_name = "YFT_1area"
system.time({
invisible(shell(paste0(mod_name,".exe"," -nox -nohess"), wait=T))
})
1613/3600
